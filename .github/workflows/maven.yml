name: Java Maven Build & Publish Artifact

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml


  publish-job:
    runs-on: ubuntu-latest
    needs: build_test
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - run: mvn --batch-mode --update-snapshots verify
    - run: mkdir staging && cp target/*.jar staging
    - run: |
        staging_dir=$(pwd)/staging 
        echo "Staging directory: $staging_dir"
        if [ -d "$staging_dir" ]; then
            echo "Staging directory already exists. Removing contents..."
            rm -rf "$staging_dir"/*
        fi
        mkdir -p "$staging_dir" && cp target/*.jar "$staging_dir"
      env:
        staging_dir: ${{ github.workspace }}/staging
    - uses: actions/upload-artifact@v3
      with:
        name: Package.zip
        path: ./staging
#    - name: Debugging - List Staging Directory
#      run: ls -R ./staging

  build-docker-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: publish-job

    steps:
      - uses: actions/checkout@v3
      - name: Build and push Docker image
        run: |
          docker build -f Dockerfile -t adeutou/pipeline-github-action-image:latest .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push adeutou/pipeline-github-action-image:latest

  automate-release:
    name: Automate GitHub Release
    needs: publish-job  # Specify the jobs that need to be completed before this job starts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Git
        run: |
          git config --global user.name "adeutou"
          git config --global user.email "a.deutou@gmail.com"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.run_number }}  # Specify the desired tag for the release
          release_name: Release ${{ github.run_number }} # Specify the release name
          draft: false
          prerelease: false
      - name: Debug - List Staging Directory
        run: ls -R ${{ github.workspace }}/
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./staging/pipeline-github-action-image.jar # Specify the path to your release asset
          asset_name: pipeline-github-action-image.jar   # Specify the name for the release asset
          asset_content_type: application/java-archive


